<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: typescript,mac,zsh | yuyunko's github pages]]></title>
  <link href="http://yuyunko.github.com/blog/categories/typescript-mac-zsh/atom.xml" rel="self"/>
  <link href="http://yuyunko.github.com/"/>
  <updated>2013-03-03T23:15:54+09:00</updated>
  <id>http://yuyunko.github.com/</id>
  <author>
    <name><![CDATA[yuyunko]]></name>
    <email><![CDATA[i.xxxxxxxxxxxxx.13@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[TypeScript on Mac]]></title>
    <link href="http://yuyunko.github.com/blog/2012/12/23/typescript-on-mac/"/>
    <updated>2012-12-23T08:34:00+09:00</updated>
    <id>http://yuyunko.github.com/blog/2012/12/23/typescript-on-mac</id>
    <content type="html"><![CDATA[<p>TypeScriptがなにやら楽しそう。
Macでも導入出来るっぽい。</p>

<p>TypeScriptを導入するには、node.jsが必要。
今のところzsh使いに最適な方法は <a href="https://github.com/hokaccha/nodebrew">nodebrew</a> を使う方法みたい。</p>

<p>curl でパイプにつないで直接入れる方法もあるっぽいけど、自分はこういうのは自分の設定ファイルの
submoduleにいれときたい（忘れる）ので、submodule add してからインストール。</p>

<p>```sh
$ git submodule add https://github.com/hokaccha/nodebrew.git nodebrew
$ cd nodebrew
$ perl nodebrew setup
fetching nodebrew...
install nodebrew in $HOME/.nodebrew</p>

<p>========================================
Add path:</p>

<h1>export PATH=$HOME/.nodebrew/current/bin:$PATH</h1>

<p>```
記述に従い、.zshenvに追加。</p>

<p>```sh</p>

<h1>nodebrew</h1>

<p>if [[ -f ~/.nodebrew/nodebrew ]]; then</p>

<pre><code>export PATH=$HOME/.nodebrew/current/bin:$PATH
</code></pre>

<p>fi
```</p>

<p>使い方は、nodebrewコマンドを打てばわかる。
```sh
$ nodebrew
nodebrew 0.6.0</p>

<p>Usage:</p>

<pre><code>nodebrew help                       Show this message
nodebrew install &lt;version&gt;          Download and install a &lt;version&gt; (compile from source)
nodebrew install-binary &lt;version&gt;   Download and install a &lt;version&gt; (binary file)
nodebrew uninstall &lt;version&gt;        Uninstall a version
nodebrew use &lt;version&gt;              Use &lt;version&gt;
nodebrew list                       List installed versions
nodebrew ls                         Alias for `list`
nodebrew ls-remote                  List remote versions
nodebrew ls-all                     List remote and installed versions
nodebrew alias &lt;key&gt; &lt;version&gt;      Set alias to version
nodebrew unalias &lt;key&gt;              Remove alias
nodebrew clean &lt;version&gt; | all      Remove source file
nodebrew selfupdate                 Update nodebrew
nodebrew migrate-package &lt;version&gt;  Install global NPM packages contained in &lt;version&gt; to current version
</code></pre>

<p>Example:</p>

<pre><code>nodebrew install v0.6.0     Install a specific version number
nodebrew use v0.6.0         Use a specific version number
</code></pre>

<p>```</p>

<p>最新をインストール
```sh
$ nodebrew install latest
$ nodebrew list
v0.9.4</p>

<p>current: none
$ nodebrew use v0.9.4
```</p>

<p>これでnpmコマンドも使用出来るようになっているので、npmでTypeScriptをインストール
<code>sh
$ npm install -g typescript
</code></p>

<p>TypeScript -> JavaScriptの変換
```sh
$ tsc
Syntax:   tsc [options] [file ..]</p>

<p>Examples: tsc hello.ts</p>

<pre><code>      tsc --out foo.js foo.ts
      tsc @args.txt
</code></pre>

<p>Options:
  -c, --comments  Emit comments to output
  --declaration   Generates corresponding .d.ts file
  -e, --exec      Execute the script after compilation
  -h, --help      Print this message
  --module KIND   Specify module code generation: "commonjs" (default) or "amd"
  --nolib         Do not include a default lib.d.ts with global declarations
  --out FILE      Concatenate and emit output to single file
  --sourcemap     Generates corresponding .map file
  --target VER    Specify ECMAScript target version: "ES3" (default), or "ES5"
  -w, --watch     Watch output files
  @<file>         Insert command line options and files from a file.</p>

<p>$ tsc test.ts
```
上記で同じディレクトリにtest.jsが出来る。</p>

<p>wsh の定義ファイル(d.ts)が欲しい</p>
]]></content>
  </entry>
  
</feed>
