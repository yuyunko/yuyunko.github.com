<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[yuyunko's github pages]]></title>
  <link href="http://yuyunko.github.com/atom.xml" rel="self"/>
  <link href="http://yuyunko.github.com/"/>
  <updated>2012-12-31T23:13:43+09:00</updated>
  <id>http://yuyunko.github.com/</id>
  <author>
    <name><![CDATA[yuyunko]]></name>
    <email><![CDATA[i.xxxxxxxxxxxxx.13@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[octopress theme]]></title>
    <link href="http://yuyunko.github.com/blog/2012/12/31/octopress-theme/"/>
    <updated>2012-12-31T15:47:00+09:00</updated>
    <id>http://yuyunko.github.com/blog/2012/12/31/octopress-theme</id>
    <content type="html"><![CDATA[<p>octopressのテーマをデフォルトから変更する手順</p>

<p>使用出来るテーマ一覧は以下に記載</p>

<p><a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">3rd Party Octopress Themes · imathis/octopress Wiki</a></p>

<p>今回はここにある</p>

<p><a href="https://github.com/roberto/oct2-orange">roberto/oct2-orange · GitHub</a></p>

<p>を使用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>% <span class="nb">cd </span>octopress
</span><span class='line'>% git clone git://github.com/roberto/oct2-orange.git .themes/oct2-orange
</span><span class='line'>% rake install<span class="se">\[</span><span class="s1">&#39;oct2-orange&#39;</span><span class="se">\]</span>
</span></code></pre></td></tr></table></div></figure>


<p>後は、_config.ymlに asides/nav.html を追加。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>default_asides: <span class="o">[</span>asides/nav.html, asides/recent_posts.html ....
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[oh-my-zsh]]></title>
    <link href="http://yuyunko.github.com/blog/2012/12/31/oh-my-zsh/"/>
    <updated>2012-12-31T10:59:00+09:00</updated>
    <id>http://yuyunko.github.com/blog/2012/12/31/oh-my-zsh</id>
    <content type="html"><![CDATA[<p>年末大掃除、zshの設定をoh-my-zshを基準に設定し直した。</p>

<h3>oh-my-zshの導入</h3>

<p>まず、自分でカスタマイズ出来るようにgithub上で、以下をフォーク</p>

<p><a href="https://github.com/robbyrussell/oh-my-zsh">robbyrussell/oh-my-zsh · GitHub</a></p>

<p>フォークした自分のoh-my-zshをclone
(clone先はデフォルトでは、~/.oh-my-zsh にしないといけない)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>% git clone git@github.com:yuyunko/oh-my-zsh.git ~/.oh-my-zsh
</span></code></pre></td></tr></table></div></figure>


<p>設定をシンボリックリンク</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>% ln -s ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc
</span></code></pre></td></tr></table></div></figure>


<p>設定ファイルの初期値は以下の通り</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Path to your oh-my-zsh configuration.</span>
</span><span class='line'><span class="nv">ZSH</span><span class="o">=</span><span class="nv">$HOME</span>/.oh-my-zsh
</span><span class='line'>
</span><span class='line'><span class="c"># Set name of the theme to load.</span>
</span><span class='line'><span class="c"># Look in ~/.oh-my-zsh/themes/</span>
</span><span class='line'><span class="c"># Optionally, if you set this to &quot;random&quot;, it&#39;ll load a random theme each</span>
</span><span class='line'><span class="c"># time that oh-my-zsh is loaded.</span>
</span><span class='line'><span class="nv">ZSH_THEME</span><span class="o">=</span><span class="s2">&quot;robbyrussell&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Example aliases</span>
</span><span class='line'><span class="c"># alias zshconfig=&quot;mate ~/.zshrc&quot;</span>
</span><span class='line'><span class="c"># alias ohmyzsh=&quot;mate ~/.oh-my-zsh&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Set to this to use case-sensitive completion</span>
</span><span class='line'><span class="c"># CASE_SENSITIVE=&quot;true&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Comment this out to disable bi-weekly auto-update checks</span>
</span><span class='line'><span class="c"># DISABLE_AUTO_UPDATE=&quot;true&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Uncomment to change how many often would you like to wait before auto-updates occur? (in days)</span>
</span><span class='line'><span class="c"># export UPDATE_ZSH_DAYS=13</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Uncomment following line if you want to disable colors in ls</span>
</span><span class='line'><span class="c"># DISABLE_LS_COLORS=&quot;true&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Uncomment following line if you want to disable autosetting terminal title.</span>
</span><span class='line'><span class="c"># DISABLE_AUTO_TITLE=&quot;true&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Uncomment following line if you want red dots to be displayed while waiting for completion</span>
</span><span class='line'><span class="c"># COMPLETION_WAITING_DOTS=&quot;true&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)</span>
</span><span class='line'><span class="c"># Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/</span>
</span><span class='line'><span class="c"># Example format: plugins=(rails git textmate ruby lighthouse)</span>
</span><span class='line'><span class="nv">plugins</span><span class="o">=(</span>git<span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">source</span> <span class="nv">$ZSH</span>/oh-my-zsh.sh
</span><span class='line'>
</span><span class='line'><span class="c"># Customize to your needs...</span>
</span></code></pre></td></tr></table></div></figure>


<p>最後の行の「Customize to your needs」の後に自分の設定を追記していく。</p>

<p>テーマは、上記、「ZSH_THEME」で設定する。</p>

<p>.oh-my-zsh/themes に自分で「mytheme.zsh-theme」という拡張子で設定ファイルを記述し、
上記設定ファイルに「ZSH_THEME=mytheme」とすると、読み込んでくれる。</p>

<p>僕はデフォルトの&#8221;robbyrussell&#8221;のテーマに<a href="https://github.com/clear-code/zsh.d">clear-code/zsh.d · GitHub</a>さんの
設定をプラスさせて貰ったようなのを利用。</p>

<div><script src='https://gist.github.com/4418029.js'></script>
<noscript><pre><code>## 256色生成用便利関数
### red: 0-5
### green: 0-5
### blue: 0-5
color256()
{
    local red=$1; shift
    local green=$2; shift
    local blue=$3; shift

    echo -n $[$red * 36 + $green * 6 + $blue + 16]
}

fg256()
{
    echo -n $'\e[38;5;'$(color256 &quot;$@&quot;)&quot;m&quot;
}

bg256()
{
    echo -n $'\e[48;5;'$(color256 &quot;$@&quot;)&quot;m&quot;
}
### プロンプトバーの左側
### %{%B%}...%{%b%}: 「...」を太字にする。
### %{%F{cyan}%}...%{%f%}: 「...」をシアン色の文字にする。
### %n: ユーザ名
### %m: ホスト名（完全なホスト名ではなくて短いホスト名）
### %{%B%F{white}%(?.%K{green}.%K{red})%}%?%{%f%k%b%}:
### 最後に実行したコマンドが正常終了していれば
### 太字で白文字で緑背景にして異常終了していれば
### 太字で白文字で赤背景にする。
### %{%F{white}%}: 白文字にする。
### %(x.true-text.false-text): xが真のときはtrue-textになり
### 偽のときはfalse-textになる。
### ?: 最後に実行したコマンドの終了ステータスが0のときに真になる。
### %K{green}: 緑景色にする。
### %K{red}: 赤景色を赤にする。
### %?: 最後に実行したコマンドの終了ステータス
### %{%k%}: 背景色を元に戻す。
### %{%f%}: 文字の色を元に戻す。
### %{%b%}: 太字を元に戻す。
### %D{%Y/%m/%d %H:%M}: 日付。「年/月/日 時:分」というフォーマット。
prompt_bar_left_self=&quot;(%{%B%}%n%{%b%}%{%F{cyan}%}@%{%f%}%{%B%}%m%{%b%})&quot;
prompt_bar_left_status=&quot;(%{%B%F{white}%(?.%K{green}.%K{red})%}%?%{%k%f%b%})&quot;
prompt_bar_left_date=&quot;&lt;%{%B%}%D{%Y/%m/%d %H:%M}%{%b%}&gt;&quot;
prompt_bar_left=&quot;-${prompt_bar_left_self}-${prompt_bar_left_status}-${prompt_bar_left_date}-&quot;
### プロンプトバーの右側
### %{%B%K{magenta}%F{white}%}...%{%f%k%b%}:
### 「...」を太字のマゼンタ背景の白文字にする。
### %d: カレントディレクトリのフルパス（省略しない）
prompt_bar_right=&quot;[%{%B%K{magenta}%F{white}%}%d%{%f%k%b%}]-&quot;

### 2行目左にでるプロンプト。
### %h: ヒストリ数。
### %(1j,(%j),): 実行中のジョブ数が1つ以上ある場合だけ「(%j)」を表示。
### %j: 実行中のジョブ数。
### %{%B%}...%{%b%}: 「...」を太字にする。
### %#: 一般ユーザなら「%」、rootユーザなら「#」になる。
#prompt_left=&quot;-[%h]%(1j,(%j),)%{%B%}%#%{%b%} &quot;
prompt_update() {

    echo $[RANDOM % 6] &gt; /dev/null

    #prompt_left=&quot;%{%F$(fg256 $[RANDOM % 6] $[RANDOM % 6] $[RANDOM % 6])%}-[%h]%(1j,(%j),)%{%B%}%#%{%b%}%{%f%} &quot;
    prompt_left=&quot;%{%F$(fg256 $[RANDOM % 5] $[RANDOM % 5] $[RANDOM % 5])%}-[%h]%(1j,(%j),)%{%B%}%#%{%b%}%{%f%} &quot;
    PROMPT='${prompt_bar_left}${prompt_bar_right}'$'\n''${prompt_left}%{$fg_bold[red]%}➜ %{$fg_bold[green]%}%p %{$fg[cyan]%}%c %{$fg_bold[blue]%}$(git_prompt_info)%{$fg_bold[blue]%} % %{$reset_color%}'

    ZSH_THEME_GIT_PROMPT_PREFIX=&quot;git:(%{$fg[red]%}&quot;
    ZSH_THEME_GIT_PROMPT_SUFFIX=&quot;%{$reset_color%}&quot;
    ZSH_THEME_GIT_PROMPT_DIRTY=&quot;%{$fg[blue]%}) %{$fg[yellow]%}✗%{$reset_color%}&quot;
    ZSH_THEME_GIT_PROMPT_CLEAN=&quot;%{$fg[blue]%})&quot;

}

add-zsh-hook precmd prompt_update</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TypeScript on Mac]]></title>
    <link href="http://yuyunko.github.com/blog/2012/12/23/typescript-on-mac/"/>
    <updated>2012-12-23T08:34:00+09:00</updated>
    <id>http://yuyunko.github.com/blog/2012/12/23/typescript-on-mac</id>
    <content type="html"><![CDATA[<p>TypeScriptがなにやら楽しそう。
Macでも導入出来るっぽい。</p>

<p>TypeScriptを導入するには、node.jsが必要。
今のところzsh使いに最適な方法は <a href="https://github.com/hokaccha/nodebrew">nodebrew</a> を使う方法みたい。</p>

<p>curl でパイプにつないで直接入れる方法もあるっぽいけど、自分はこういうのは自分の設定ファイルの
submoduleにいれときたい（忘れる）ので、submodule add してからインストール。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git submodule add https://github.com/hokaccha/nodebrew.git nodebrew
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>nodebrew
</span><span class='line'><span class="nv">$ </span>perl nodebrew setup
</span><span class='line'>fetching nodebrew...
</span><span class='line'>install nodebrew in <span class="nv">$HOME</span>/.nodebrew
</span><span class='line'>
</span><span class='line'><span class="o">========================================</span>
</span><span class='line'>Add path:
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$HOME</span>/.nodebrew/current/bin:<span class="nv">$PATH</span>
</span><span class='line'><span class="o">========================================</span>
</span></code></pre></td></tr></table></div></figure>


<p>記述に従い、.zshenvに追加。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># nodebrew</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> -f ~/.nodebrew/nodebrew <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$HOME</span>/.nodebrew/current/bin:<span class="nv">$PATH</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>使い方は、nodebrewコマンドを打てばわかる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>nodebrew
</span><span class='line'>nodebrew 0.6.0
</span><span class='line'>
</span><span class='line'>Usage:
</span><span class='line'>    nodebrew <span class="nb">help                       </span>Show this message
</span><span class='line'>    nodebrew install &lt;version&gt;          Download and install a &lt;version&gt; <span class="o">(</span>compile from <span class="nb">source</span><span class="o">)</span>
</span><span class='line'>    nodebrew install-binary &lt;version&gt;   Download and install a &lt;version&gt; <span class="o">(</span>binary file<span class="o">)</span>
</span><span class='line'>    nodebrew uninstall &lt;version&gt;        Uninstall a version
</span><span class='line'>    nodebrew use &lt;version&gt;              Use &lt;version&gt;
</span><span class='line'>    nodebrew list                       List installed versions
</span><span class='line'>    nodebrew ls                         Alias <span class="k">for</span> <span class="sb">`</span>list<span class="sb">`</span>
</span><span class='line'>    nodebrew ls-remote                  List remote versions
</span><span class='line'>    nodebrew ls-all                     List remote and installed versions
</span><span class='line'>    nodebrew <span class="nb">alias</span> &lt;key&gt; &lt;version&gt;      Set <span class="nb">alias </span>to version
</span><span class='line'>    nodebrew <span class="nb">unalias</span> &lt;key&gt;              Remove <span class="nb">alias</span>
</span><span class='line'><span class="nb">    </span>nodebrew clean &lt;version&gt; | all      Remove <span class="nb">source </span>file
</span><span class='line'>    nodebrew selfupdate                 Update nodebrew
</span><span class='line'>    nodebrew migrate-package &lt;version&gt;  Install global NPM packages contained in &lt;version&gt; to current version
</span><span class='line'>
</span><span class='line'>Example:
</span><span class='line'>    nodebrew install v0.6.0     Install a specific version number
</span><span class='line'>    nodebrew use v0.6.0         Use a specific version number
</span></code></pre></td></tr></table></div></figure>


<p>最新をインストール</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>nodebrew install latest
</span><span class='line'><span class="nv">$ </span>nodebrew list
</span><span class='line'>v0.9.4
</span><span class='line'>
</span><span class='line'>current: none
</span><span class='line'><span class="nv">$ </span>nodebrew use v0.9.4
</span></code></pre></td></tr></table></div></figure>


<p>これでnpmコマンドも使用出来るようになっているので、npmでTypeScriptをインストール</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm install -g typescript
</span></code></pre></td></tr></table></div></figure>


<p>TypeScript -> JavaScriptの変換</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>tsc
</span><span class='line'>Syntax:   tsc <span class="o">[</span>options<span class="o">]</span> <span class="o">[</span>file ..<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Examples: tsc hello.ts
</span><span class='line'>          tsc --out foo.js foo.ts
</span><span class='line'>          tsc @args.txt
</span><span class='line'>
</span><span class='line'>Options:
</span><span class='line'>  -c, --comments  Emit comments to output
</span><span class='line'>  --declaration   Generates corresponding .d.ts file
</span><span class='line'>  -e, --exec      Execute the script after compilation
</span><span class='line'>  -h, --help      Print this message
</span><span class='line'>  --module KIND   Specify module code generation: <span class="s2">&quot;commonjs&quot;</span> <span class="o">(</span>default<span class="o">)</span> or <span class="s2">&quot;amd&quot;</span>
</span><span class='line'>  --nolib         Do not include a default lib.d.ts with global declarations
</span><span class='line'>  --out FILE      Concatenate and emit output to single file
</span><span class='line'>  --sourcemap     Generates corresponding .map file
</span><span class='line'>  --target VER    Specify ECMAScript target version: <span class="s2">&quot;ES3&quot;</span> <span class="o">(</span>default<span class="o">)</span>, or <span class="s2">&quot;ES5&quot;</span>
</span><span class='line'>  -w, --watch     Watch output files
</span><span class='line'>  @&lt;file&gt;         Insert <span class="nb">command </span>line options and files from a file.
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>tsc test.ts
</span></code></pre></td></tr></table></div></figure>


<p>上記で同じディレクトリにtest.jsが出来る。</p>

<p>wsh の定義ファイル(d.ts)が欲しい</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[バッチファイルとしてJScriptを実行]]></title>
    <link href="http://yuyunko.github.com/blog/2012/08/03/jscript/"/>
    <updated>2012-08-03T00:55:00+09:00</updated>
    <id>http://yuyunko.github.com/blog/2012/08/03/jscript</id>
    <content type="html"><![CDATA[<div><script src='https://gist.github.com/4418954.js'></script>
<noscript><pre><code>@if(0)==(0) echo off
    CScript.exe //NoLogo //E:JScript &quot;%~f0&quot; %*
goto :EOF
@end

//{{{ ファイル入出力用関数
function FileSystem() {

    //{{{ member
    var fso = new ActiveXObject(&quot;Scripting.FileSystemObject&quot;);
    //}}}

    return {
        //{{{ getFso
        getFso : function () {
            return fso;
        },//}}}

        //{{{ withReadFile:ファイル入力
        withReadFile : function (filename, func) {
            var file = fso.OpenTextFile(filename, 1, false);
            try {
                func(file);
            } finally {
                file.Close();
            }
        },//}}}

        //{{{ withEachLine:ファイル行入力
        withEachLine : function (filename, func) {
            withReadFile(filename, function (file) {
                while (!file.AtEndOfStream) {
                    func(file.ReadLine());
                }
            });
        },//}}}

        //{{{ withWriteFile:ファイル出力
        withWriteFile : function (filename, func) {
            var file = fso.OpenTextFile(filename, 2, true);
            try {
                func(file);
            } finally {
                file.Close();
            }
        },//}}}

        //{{{ withEachFileName:ファイル名一覧
        withEachFileName : function (path, subdir, func) {
            var folder = fso.GetFolder(path);
            var files = new Enumerator(folder.Files);
            while (!files.atEnd()) {
                func(new String(files.item()));
                files.moveNext();
            }
            if (subdir) {
                var folders = new Enumerator(folder.SubFolders);
                while (!folders.atEnd()) {
                    arguments.callee(folders.item(), subdir, func);
                    folders.moveNext();
                }
            }
        },//}}}

        //{{{ forceCreateFolders:フォルダ（ディレクトリ）階層の作成
        forceCreateFolders : function (path) {
            if (path.length &gt; 0 &amp;&amp; !fso.FolderExists(path)) {
                forceCreateFolders(fso.GetParentFolderName(path));
                fso.CreateFolder(path);
            }
        }//}}}
    };
}
//}}}

//{{{ EXCEL用関数
function ExcelSystem() {

    //{{{ member
    // 表示属性指定用の定数
    var Excel = {
        // 文字位置
        xlGeneral : 1,
        xlLeft : -4131,
        xlCenter : -4108,
        xlRight : -4152,
        xlTop : -4160,
        xlBottom : -4107,
        xlJustify : -4130,
        xlDistributed : -4117,
        // 罫線の位置
        xlEdgeLeft : 7,
        xlEdgeTop : 8,
        xlEdgeRight : 10,
        xlEdgeBottom : 9,
        // 罫線の種類
        xlContinuous : 1,
        xlDash : -4115,
        xlDashDot : 4,
        xlDashDotDot : 5,
        xlDot : -4118,
        xlDouble : -4119,
        // 罫線の太さ
        xlHairLine : 1,
        xlThin : 2,
        xlThick : 4,
        xlMedium : -4138
    };
    //}}}

    return {
        //{{{ withExcel:EXCEL起動
        withExcel : function (visible, func) {
            var excel = new ActiveXObject(&quot;Excel.Application&quot;);
            excel.Visible = visible;
            excel.DisplayAlerts = false;
            try {
                func(excel);
            } finally {
                excel.Quit();
            }
        },//}}}

        //{{{ withWorkbook:EXCELワークブック操作
        withWorkbook : function (filename, visible, readonly, func) {
            ExcelSystem().withExcel(visible, function (excel) {
                var workbook = excel.Workbooks.Open(filename, 0, readonly);
                try {
                    func(workbook);
                } finally {
                    workbook.Close();
                }
            });
        },//}}}

        //{{{ withNewWorkbook:EXCEL新規ワークブック操作
        withNewWorkbook : function (filename, visible, func) {
            withExcel(visible, function (excel) {
                var workbook = excel.Workbooks.Add();
                try {
                    try {
                        func(workbook);
                    } finally {
                        workbook.SaveAs(filename);
                    }
                } finally {
                    workbook.Close();
                }
            });
        },//}}}

        //{{{ setCellAttr:セル装飾指定
        setCellAttr : function (cell, value, attributes) {
            if (attributes.width) {
                cell.ColumnWidth = attributes.width;
            }
            if (attributes.height) {
                cell.RowHeight = attributes.height;
            }
            if (attributes.font) {
                cell.Font.Name = attributes.font;
            }
            if (attributes.fontSize) {
                cell.Font.Size = attributes.fontSize;
            }
            if (attributes.fontStyle) {
                cell.Font.FontStyle = attributes.fontStyle;
            }
            if (attributes.format) {
                cell.NumberFormatLocal = attributes.format;
            }
            if (attributes.align) {
                cell.HorizontalAlignment = attributes.align;
            }
            if (attributes.valign) {
                cell.VerticalAlignment = attributes.valign;
            }
            if (attributes.borders) {
                for (var i = 0; i &lt; attributes.borders.length; i++) {
                    WScript.Echo(i);
                    var border = cell.Borders(attributes.borders[i]);
                    WScript.Echo(border.Weight);
                    border.Weight = Excel.xlThin;
                    border.LineStyle = Excel.xlContinuous;
                }
            }
            if (value) {
                cell.value = value;
            }
        }//}}}
    };
}
//}}}</code></pre></noscript></div>


<p>1L〜4LまでがJScriptをバッチファイルとして実行するイディオム</p>

<p>6L〜はファイルを扱う時用、その後はExcelを扱う時用の関数。</p>

<p>いろいろ出来そう。</p>

<p>参考</p>

<p><a href="http://d.hatena.ne.jp/miya2000/20090823/p0">JScript でハマる日々 - m2</a></p>

<p><a href="http://www.h4.dion.ne.jp/~unkai/js/index.html">Javascriptプログラミング</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zsh でautojump]]></title>
    <link href="http://yuyunko.github.com/blog/2012/07/15/zsh-autojump/"/>
    <updated>2012-07-15T09:09:00+09:00</updated>
    <id>http://yuyunko.github.com/blog/2012/07/15/zsh-autojump</id>
    <content type="html"><![CDATA[<p>zshでautojumpが非常に便利だということを知った。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>brew install autojump
</span></code></pre></td></tr></table></div></figure>


<p>でインストール</p>

<div><script src='https://gist.github.com/3114532.js'></script>
<noscript><pre><code>brew install autojump
</code></pre></noscript></div>


<p>を.zshrcに追記</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>j ディレクトリの一部<span class="o">[</span>tab<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>で補完。</p>

<p>参考</p>

<p><a href="http://blog.glidenote.com/blog/2012/02/29/autojump-zsh/">zsh使いなら効率改善のため知っておきたいAUTOJUMP - Glide Note - グライドノート</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[github pages 初投稿！]]></title>
    <link href="http://yuyunko.github.com/blog/2012/07/15/first-blog/"/>
    <updated>2012-07-15T02:05:00+09:00</updated>
    <id>http://yuyunko.github.com/blog/2012/07/15/first-blog</id>
    <content type="html"><![CDATA[<h2>初投稿</h2>

<p>どうかな？</p>
]]></content>
  </entry>
  
</feed>
